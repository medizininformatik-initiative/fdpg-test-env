---
- name: Certbot
  tags:
  - common
  - certbot
  block:
  - name: Certbot - Set directory writable by certbot
    file:
        path: "{{ item }}"
        state: directory
        owner: "{{ certbot_user_id | default(deploy_user)}}"
        group: "{{ certbot_group_id | default(deploy_user) }}"
        mode: "777"
    loop:
    - "{{ certificates_path }}"
    - "/tmp/letsencrypt"

  - name: Certbot - Register certbot
    shell: |
      docker run --rm \
                 --name certbot-register \
                 --user {{ certbot_user_id | default(deploy_user) }}:{{ certbot_group_id | default(deploy_user) }} \
                 -v {{ certificates_path }}:/etc/letsencrypt \
                 -v /tmp/letsencrypt:/var/log/letsencrypt \
                 -v /tmp/letsencrypt:/var/lib/letsencrypt \
                 certbot/certbot -n register --agree-tos --email {{ certbot_register_email }}
      touch {{ certificates_path }}/.registered
    args:
      creates: "{{ certificates_path }}/.registered"
    tags:
    - certbot

  - name: Certbot - Setup Certbot Container
    docker_container:
      name: certbot-renew
      image: certbot/certbot
      user: "{{ certbot_user_id | default(deploy_user) }}:{{ certbot_group_id | default(deploy_user) }}"
      command: "certonly -q --standalone --preferred-challenges http --keep-until-expiring -d {{ certbot_register_domain }}
                         {%- if (certbot_register_sans is defined) and (certbot_register_sans is iterable) %}
                           {%- for san in certbot_register_sans %} -d {{ san }}
                           {%- endfor %}
                         {%- endif %} --deploy-hook 'touch /var/lib/letsencrypt/_renewed'"
      ports:
      - "80:80"
      volumes:
      - "{{ certificates_path }}:/etc/letsencrypt"
      - "/tmp/letsencrypt:/var/log/letsencrypt"
      - "/tmp/letsencrypt:/var/lib/letsencrypt"
    tags:
    - certbot

  - name: Certbot - Wait until certificate is present before continuing
    ansible.builtin.wait_for:
      path: "{{ certificates_path }}/live/{{ certbot_register_domain }}"
      timeout: 30

  - name: Certbot - Copy renewal script
    template:
      src: "cert-renewal.sh.j2"
      dest: "{{ deploy_path }}/cert-renewal.sh"
      owner: ubuntu
      group: ubuntu
      mode: u+rwx,g-wx,o-rwx
    vars:
      project_name: "{{ certbot_renewal_project_name }}"
      docker_compose_files: "{{ certbot_renewal_docker_compose_files }}"
      docker_compose_services: "{{ certbot_renewal_docker_compose_services }}"

  - name: Certbot - Setup cronjob for certificate renewal
    cron:
      name: certbot-renewal
      job: "/bin/bash -l {{ deploy_path }}/cert-renewal.sh"
      minute: "0"
      hour: "1"
    tags:
    - certbot

  - name: Certbot - Get certificate path
    shell: |
      docker run --rm \
                 --name certbot-list \
                 --user {{ certbot_user_id | default(deploy_user) }}:{{ certbot_group_id | default(deploy_user) }} \
                 -v {{ certificates_path }}:/etc/letsencrypt \
                 -v /tmp/letsencrypt:/var/log/letsencrypt \
                 -v /tmp/letsencrypt:/var/lib/letsencrypt \
                 certbot/certbot certificates | \
      grep -A 100 'Certificate Name: {{ certbot_register_domain }}' | \
      grep -m 1 -o -P '(?<=Certificate Path: )[\w\./-]+' | \
      sed 's#/etc/letsencrypt#{{ certificates_path }}#'
    register: cert_path
    changed_when: false

  - name: Certbot - Get private key path
    shell: |
      docker run --rm \
                 --name certbot-list \
                 --user {{ certbot_user_id | default(deploy_user) }}:{{ certbot_group_id | default(deploy_user) }} \
                 -v {{ certificates_path }}:/etc/letsencrypt \
                 -v /tmp/letsencrypt:/var/log/letsencrypt \
                 -v /tmp/letsencrypt:/var/lib/letsencrypt \
                 certbot/certbot certificates | \
      grep -A 100 'Certificate Name: {{ certbot_register_domain }}' | \
      grep -m 1 -o -P '(?<=Private Key Path: )[\w\./-]+' | \
      sed 's#/etc/letsencrypt#{{ certificates_path }}#'
    register: pkey_path
    changed_when: false

  - name: Certbot - Copy certificate and private key paths to facts
    set_fact:
      certificate_path: "{{ cert_path.stdout}}"
      private_key_path: "{{ pkey_path.stdout }}"
