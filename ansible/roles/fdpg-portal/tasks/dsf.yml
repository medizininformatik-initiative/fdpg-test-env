---
- name: FDPG DSF
  tags: dsf
  block:
  - name: FDPG DSF - Upload Secrets
    include_role:
      name: common
      tasks_from: get-storage-file
    vars:
      storage_file_path: "{{ item.src }}"
      host_file_path: "{{ item.dest }}"
    loop:
    - src:  "secrets/{{ env }}/dsf/fdpg/bpe.fdpg.{{ env }}.ffg.de.crt"
      dest: "{{ secrets_path }}/bpe.fdpg.{{ env }}.ffg.de.crt"
    - src:  "secrets/{{ env }}/dsf/fdpg/bpe.fdpg.{{ env }}.ffg.de.key"
      dest: "{{ secrets_path }}/bpe.fdpg.{{ env }}.ffg.de.key"
    - src:  "secrets/{{ env }}/dsf/fdpg/backend.fdpg.{{ env }}.ffg.de.crt"
      dest: "{{ secrets_path }}/backend.fdpg.{{ env }}.ffg.de.crt"
    - src:  "secrets/{{ env }}/dsf/fdpg/db_user.password"
      dest: "{{ secrets_path }}/db_user.password"
    - src:  "secrets/{{ env }}/dsf/fdpg/db_user_camunda.password"
      dest: "{{ secrets_path }}/db_user_camunda.password"
    - src:  "secrets/{{ env }}/dsf/fdpg/db_user_permanent_delete.password"
      dest: "{{ secrets_path }}/db_user_permanent_delete.password"
    - src:  "secrets/{{ env }}/dsf/fdpg/db_liquibase.password"
      dest: "{{ secrets_path }}/db_liquibase.password"
    - src:  "secrets/{{ env }}/domain/trusted_cas.pem"
      dest: "{{ secrets_path }}/trusted_cas.pem"

  - name: FDPG DSF - Generate Client Certificate Thumbprint
    shell:
      cmd: openssl x509 -noout -fingerprint -sha512 -inform pem -in {{ item }} | tr \[:upper:\] \[:lower:\] | tr -d ':' | sed 's/sha512 fingerprint=//'
    delegate_to: localhost
    loop:
    - "{{ storage_path }}/secrets/{{ env }}/dsf/fdpg/bpe.fdpg.{{ env }}.ffg.de.crt"
    - "{{ storage_path }}/secrets/{{ env }}/dsf/fdpg/backend.fdpg.{{ env }}.ffg.de.crt"
    - "{{ storage_path }}/secrets/{{ env }}/dsf/Webbrowser_Test_User/Webbrowser_Test_User.{{ env }}.ffg.de.crt"
    - "{{ storage_path }}/secrets/{{ env }}/dsf/diz-1/bpe.diz-1.{{ env }}.ffg.de.crt"
    - "{{ storage_path }}/secrets/{{ env }}/dsf/diz-2/bpe.diz-2.{{ env }}.ffg.de.crt"
    - "{{ storage_path }}/secrets/{{ env }}/dsf/dms/bpe.dms.{{ env }}.ffg.de.crt"
    register: cert_thumbprint
    changed_when: false

  - name: FDPG DSF - xtract Certificate Thumbprints to variables
    set_fact:
      dsf_organization_thumbprint: "{{ cert_thumbprint.results[0].stdout }}"
      backend_thumbprint: "{{ cert_thumbprint.results[1].stdout }}"
      webbrowser_test_user_thumbprint: "{{ cert_thumbprint.results[2].stdout }}"
      diz_1_organization_thumbprint: "{{ cert_thumbprint.results[3].stdout }}"
      diz_2_organization_thumbprint: "{{ cert_thumbprint.results[4].stdout }}"
      dms_organization_thumbprint: "{{ cert_thumbprint.results[5].stdout }}"
    changed_when: false

  - name: FDPG DSF - Create folders
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ deploy_user }}"
      group: "{{ deploy_user }}"
      mode: "777"
    loop:
    - "{{ project_path }}/cache"
    - "{{ project_path }}/log/bpe"
    - "{{ project_path }}/log/fhir"
    - "{{ project_path }}/process"

  - name: FDPG DSF - Install process plugins
    include_role:
      name: common
      tasks_from: dsf-bpe-install-plugins
    vars:
      process_plugin_folder_path: "{{ project_path }}/process"
      process_plugins:
      - name: ping-pong
        url: "https://github.com/datasharingframework/dsf-process-ping-pong"
        version: "{{ dsf_process_ping_pong_version }}"
        file:
          basename: "dsf-process-ping-pong"
          extension: "jar"
      - name: feasibility
        url: "https://github.com/medizininformatik-initiative/mii-process-feasibility"
        version: "{{ dsf_process_feasibility_version }}"
        file:
          basename: "feasibility-dsf-process"
          extension: "jar"
      - name: report
        url: "https://github.com/medizininformatik-initiative/mii-process-report"
        version: "{{ dsf_process_report_version }}"
        file:
          basename: "mii-process-report"
          extension: "jar"
      - name: data-sharing
        url: "https://github.com/medizininformatik-initiative/mii-process-data-sharing"
        version: "{{ dsf_process_data_sharing_version }}"
        file:
          basename: "mii-process-data-sharing"
          extension: "jar"

  - name: FDPG DSF - Get environment config stats
    stat:
      path: "{{ project_path }}/.env"
    register: dsf_env

  - name: FDPG DSF - Create .env config with default values
    template:
      src: "dsf.env.default.j2"
      dest: "{{ project_path }}/.env"
      owner: "{{ deploy_user }}"
      group: "{{ deploy_user }}"
      mode: u=rw,g=r,o=r
    when: dsf_env.stat.exists == false

  - name: FDPG DSF - Generate configuration files
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ deploy_user }}"
      group: "{{ deploy_user }}"
      mode: u=rw,g=r,o=r
    loop:
    - src: dsf-docker-compose.yml.j2
      dest: "{{ project_path }}/docker-compose.yml"
    - src: dsf-bpe.env.default.j2
      dest: "{{ project_path }}/bpe.env.default"
    - src: dsf-fhir.env.default.j2
      dest: "{{ project_path }}/fhir.env.default"
    - src: allowlist.xml.j2
      dest: "{{ project_path }}/allowlist.xml"
    vars:
      dsf_process_report_version_number: "{{ dsf_process_report_version | regex_replace('^(\\d+\\.\\d+)\\.\\d+\\.\\d+.*$', '\\1') }}"
      dsf_process_data_sharing_version_number: "{{ dsf_process_data_sharing_version | regex_replace('^(\\d+\\.\\d+)\\.\\d+\\.\\d+.*$', '\\1') }}"
      dsf_process_feasibility_version_number: "{{ dsf_process_feasibility_version | regex_replace('^(\\d+\\.\\d+)\\.\\d+\\.\\d+.*$', '\\1') }}"

  - name: FDPG DSF - Copy DB init script
    copy:
      src: dsf-init-db.sh
      dest: "{{ project_path }}/init-db.sh"

  - name: FDPG DSF - Start DSF
    community.docker.docker_compose_v2:
      project_src: "{{ project_path }}"
      project_name: "{{ project_name }}"
    environment:
      COMPOSE_IGNORE_ORPHANS: "1"

  - name: FDPG DSF - Set project name shell variable for scripts
    lineinfile:
      path: "/etc/environment"
      state: present
      regexp: "^FEASIBILITY_COMPOSE_PROJECT="
      line: "FEASIBILITY_COMPOSE_PROJECT=fdpg"
    become: true

  - name: FDPG DSF - Wait for FHIR app
    uri:
      url: "https://{{ fdpg_portal_dsf_domain }}/fhir/metadata"
      method: GET
      ca_path: "{{ secrets_path }}/trusted_cas.pem"
      client_cert: "{{ secrets_path }}/bpe.fdpg.{{ env }}.ffg.de.crt"
      client_key: "{{ secrets_path }}/bpe.fdpg.{{ env }}.ffg.de.key"
    register: _result
    until: _result.status == 200
    retries: 12 # 12 * 10s = 120s
    delay: 10 # Every 5 seconds

  - name: DSF FHIR - Upload Allow List
    uri:
      remote_src: true
      url: "https://{{ fdpg_portal_dsf_domain }}/fhir/"
      method: POST
      ca_path: "{{ secrets_path }}/trusted_cas.pem"
      client_cert: "{{ secrets_path }}/bpe.fdpg.{{ env }}.ffg.de.crt"
      client_key: "{{ secrets_path }}/bpe.fdpg.{{ env }}.ffg.de.key"
      headers:
        Content-Type: application/fhir+xml
      src: "{{ project_path }}/allowlist.xml"
      timeout: 60
      status_code:
      - 200
      - 201
