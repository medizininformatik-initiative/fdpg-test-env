---
# tasks file for roles/dms
- name: DMS - Set variables
  set_fact:
    bpe_cache_path: "{{ deploy_path }}/bpe/cache"
    bpe_log_path: "{{ deploy_path }}/bpe/logs"
    bpe_process_path: "{{ deploy_path }}/bpe/process"
    fhir_log_path: "{{ deploy_path }}/fhir/logs"
    nginx_conf_path: "{{ deploy_path }}/nginx.conf"
    proxy_trusted_client_cas_path: "{{ secrets_path }}/trusted_cas.pem"
    client_certificate_path: "{{ secrets_path }}/bpe.dms.{{ env }}.ffg.de.crt"
    client_certificate_private_key_path: "{{ secrets_path }}/bpe.dms.{{ env }}.ffg.de.key"
    client_trust_certificates_path: "{{ secrets_path }}/trusted_cas.pem"
    db_liquibase_password_path: "{{ secrets_path }}/db_liquibase.password"
    db_bpe_user_password_path: "{{ secrets_path }}/db_user.password"
    db_bpe_user_camunda_password_path: "{{ secrets_path }}/db_user_camunda.password"
    db_fhir_user_password_path: "{{ secrets_path }}/db_user.password"
    db_fhir_user_permanent_delete_password_path: "{{ secrets_path }}/db_user_permanent_delete.password"
    dms_public_key_path: "{{ secrets_path }}/dms_public_key.pem"
    dms_private_key_path: "{{ secrets_path }}/dms_private_key.pem"

- name: "DMS - Create folders"
  file:
    path: "{{ item.path }}"
    state: directory
    recurse: true
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: "{{ item.mode }}"
  loop:
  - path: "{{ secrets_path }}"
    mode: "u=rwx,g=rx,o=rx"
  - path: "{{ bpe_cache_path }}"
    mode: "u=rwx,g=rwx,o=rwx"
  - path: "{{ bpe_log_path }}"
    mode: "u=rwx,g=rwx,o=rwx"
  - path: "{{ bpe_process_path }}"
    mode: "u=rwx,g=rx,o=rx"
  - path: "{{ fhir_log_path }}"
    mode: "u=rwx,g=rwx,o=rwx"

- name: DMS - Upload secrets
  include_role:
    name: common
    tasks_from: get-storage-file
  vars:
    storage_file_path: "{{ item.src }}"
    host_file_path: "{{ item.dest }}"
  loop:
  - src:  "secrets/{{env}}/domain/trusted_cas.pem"
    dest: "{{ proxy_trusted_client_cas_path }}"
  - src:  "secrets/{{env}}/dsf/dms/bpe.dms.{{ env }}.ffg.de.crt"
    dest: "{{ client_certificate_path }}"
  - src:  "secrets/{{env}}/dsf/dms/bpe.dms.{{ env }}.ffg.de.key"
    dest: "{{ client_certificate_private_key_path }}"
  - src:  "secrets/{{env}}/dsf/dms/db_user_camunda.password"
    dest: "{{ db_bpe_user_camunda_password_path }}"
  - src:  "secrets/{{env}}/dsf/dms/db_user.password"
    dest: "{{ db_fhir_user_password_path }}"
  - src:  "secrets/{{env}}/dsf/dms/db_user_permanent_delete.password"
    dest: "{{ db_fhir_user_permanent_delete_password_path }}"
  - src:  "secrets/{{env}}/dsf/dms/db_liquibase.password"
    dest: "{{ db_liquibase_password_path }}"
  - src:  "secrets/{{env}}/dsf/dms/dms_public_key.pem"
    dest: "{{ dms_public_key_path }}"
  - src:  "secrets/{{env}}/dsf/dms/dms_private_key.pem"
    dest: "{{ dms_private_key_path }}"

- name: DMS - Get Certificate and Key from Storage
  include_role:
    name: common
    tasks_from: get-storage-file
  vars:
    storage_file_path: "{{ item.src }}"
    host_file_path: "{{ item.dest }}"
  loop:
  - src:  "secrets/{{ env }}/domain/fdpg.{{ env }}.ffg.de.crt"
    dest: "{{ secrets_path }}/fdpg.{{ env }}.ffg.de.crt"
  - src:  "secrets/{{ env }}/domain/fdpg.{{ env }}.ffg.de.key"
    dest: "{{ secrets_path }}/fdpg.{{ env }}.ffg.de.key"
  when: not letsencrypt_enabled

- name: DMS - Set Certificate and Key Path Variables
  set_fact:
    certificate_path: "{{ secrets_path }}/fdpg.{{ env }}.ffg.de.crt"
    private_key_path: "{{ secrets_path }}/fdpg.{{ env }}.ffg.de.key"
  when: not letsencrypt_enabled

- name: Get Certificate and Key from LetsEncrypt
  include_role:
    name: common
    tasks_from: certbot
  vars:
    certbot_register_email: info@tmf-ev.de
    certbot_register_domain: "{{ dms_dsf_domain }}"
    certificates_path: "{{ secrets_path }}/letsencrypt"
    certbot_user_id: 101
    certbot_group_id: 101
  when: letsencrypt_enabled

- name: DMS - Generate Client Certificate Thumbprint
  shell:
    cmd: openssl x509 -noout -fingerprint -sha512 -inform pem -in {{ item }} | tr \[:upper:\] \[:lower:\] | tr -d ':' | sed 's/sha512 fingerprint=//'
  delegate_to: localhost
  loop:
  - "{{ storage_path }}/secrets/{{ env }}/dsf/dms/bpe.dms.{{ env }}.ffg.de.crt"
  - "{{ storage_path }}/secrets/{{ env }}/dsf/Webbrowser_Test_User/Webbrowser_Test_User.{{ env }}.ffg.de.crt"
  - "{{ storage_path }}/secrets/{{ env }}/dsf/fdpg/bpe.fdpg.{{ env }}.ffg.de.crt"
  - "{{ storage_path }}/secrets/{{ env }}/dsf/diz-1/bpe.diz-1.{{ env }}.ffg.de.crt"
  - "{{ storage_path }}/secrets/{{ env }}/dsf/diz-2/bpe.diz-2.{{ env }}.ffg.de.crt"
  register: cert_thumbprint
  changed_when: false

- name: DMS - Extract Certificate Thumbprints to variables
  set_fact:
    dms_organization_thumbprint: "{{ cert_thumbprint.results[0].stdout }}"
    webbrowser_test_user_thumbprint: "{{ cert_thumbprint.results[1].stdout }}"
    fdpg_organization_thumbprint: "{{ cert_thumbprint.results[2].stdout }}"
    diz_1_organization_thumbprint: "{{ cert_thumbprint.results[3].stdout }}"
    diz_2_organization_thumbprint: "{{ cert_thumbprint.results[4].stdout }}"
  changed_when: false

- name: DMS - Install bpe process plugins
  include_role:
    name: common
    tasks_from: dsf-bpe-install-plugins
  vars:
    process_plugin_folder_path: "{{ deploy_path }}/bpe/process"
    process_plugins: "{{ dsf_process_plugins_install }}"
    process_scope: 'dms'

- name: DMS - Deploy service files
  template:
    src: "{{ item.src }}"
    dest: "{{ deploy_path }}/{{ item.dest }}"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: u=rw,g=r,o=r
  loop:
  - src: "docker-compose.yml.j2"
    dest: "docker-compose.yml"
  - src: "nginx.conf.j2"
    dest: "nginx.conf"
  - src: "dsf-bpe.env.default.j2"
    dest: "bpe.env.default"
  - src: "dsf-fhir.env.default.j2"
    dest: "fhir.env.default"
  - src: "allowlist.xml.j2"
    dest: "allowlist.xml"

- name: DMS - Start services
  community.docker.docker_compose_v2:
    project_src: "{{ deploy_path }}"
    project_name: "dms"
    recreate: "{% if recreateContainer is defined and recreateContainer|lower in ['yes', 'true'] %}always{% else %}auto{% endif %}"

- name: DMS - Wait for FHIR app
  uri:
    url: "https://{{ dms_dsf_domain }}/fhir/metadata"
    method: GET
    ca_path: "{{ client_trust_certificates_path }}"
    client_cert: "{{ client_certificate_path }}"
    client_key: "{{ client_certificate_private_key_path }}"
  register: _result
  until: _result.status == 200
  retries: 12 # 12 * 10s = 120s
  delay: 10 # Every 5 seconds

- name: DMS - Upload Allow List
  uri:
    remote_src: true
    url: "https://{{ dms_dsf_domain }}/fhir/"
    method: POST
    ca_path: "{{ client_trust_certificates_path }}"
    client_cert: "{{ client_certificate_path }}"
    client_key: "{{ client_certificate_private_key_path }}"
    headers:
      Content-Type: application/fhir+xml
    src: "{{ deploy_path }}/allowlist.xml"
    timeout: 60
    status_code:
    - 200
    - 201
